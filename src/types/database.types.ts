// This file is auto-generated by the Supabase CLI

import { Database as DatabaseGenerated } from './supabase';

export type Json =
  | string
  | number
  | boolean
  | null
  | { [key: string]: Json | undefined }
  | Json[]

// Define base table structure
type BaseTable = {
  Row: Record<string, unknown>;
  Insert: Record<string, unknown>;
  Update: Record<string, unknown>;
};

// Define base view structure
type BaseView = {
  Row: Record<string, unknown>;
};

// Define function structure
type DatabaseFunction = {
  Args: Record<string, unknown>;
  Returns: unknown;
};

// Main database type that extends the generated types
export interface Database extends DatabaseGenerated {
  public: {
    Tables: {
      [tableName: string]: BaseTable;
    };
    Views: {
      [viewName: string]: BaseView;
    };
    Functions: {
      [functionName: string]: DatabaseFunction;
    };
    Enums: {
      [enumName: string]: readonly string[];
    };
  };
}

// Helper types for common operations
export type Tables<T extends keyof Database['public']['Tables']> = Database['public']['Tables'][T]['Row'];
export type TablesInsert<T extends keyof Database['public']['Tables']> = Database['public']['Tables'][T]['Insert'];
export type TablesUpdate<T extends keyof Database['public']['Tables']> = Database['public']['Tables'][T]['Update'];

export type Enums<T extends keyof Database['public']['Enums']> = Database['public']['Enums'][T];

export type DbResult<T> = T extends PromiseLike<infer U> ? U : never;
export type DbResultOk<T> = T extends PromiseLike<{ data: infer U }> ? Exclude<U, null> : never;
export type DbResultErr = { error: Error };
